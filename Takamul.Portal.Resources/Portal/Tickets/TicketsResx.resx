<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddNewTicket" xml:space="preserve">
    <value>Add New Ticket</value>
  </data>
  <data name="AddTicket" xml:space="preserve">
    <value>Add Ticket</value>
  </data>
  <data name="AllowedFileSize" xml:space="preserve">
    <value>Only allowed file size upto 10 MB.</value>
  </data>
  <data name="AllTickets" xml:space="preserve">
    <value>All Tickets</value>
  </data>
  <data name="ChangeTicketStatus" xml:space="preserve">
    <value>Change Ticket Status</value>
  </data>
  <data name="CreatedDate" xml:space="preserve">
    <value>Created Date</value>
  </data>
  <data name="EnterRejectReason" xml:space="preserve">
    <value>enterreject reason&amp;hellip;&amp;hellip;</value>
  </data>
  <data name="EnterYourMessage" xml:space="preserve">
    <value>Enter your message...</value>
  </data>
  <data name="GoBackToTickets" xml:space="preserve">
    <value>Go Back To Tickets</value>
  </data>
  <data name="GoToChats" xml:space="preserve">
    <value>Go To Chats</value>
  </data>
  <data name="InvalidFileFormat" xml:space="preserve">
    <value>Uploaded file is not a valid format.Only PNG,JPG,JPEG is allowed.</value>
  </data>
  <data name="IsActive" xml:space="preserve">
    <value>Is Active</value>
  </data>
  <data name="ParticipantUser" xml:space="preserve">
    <value>Participant User</value>
  </data>
  <data name="PleaseSelectFile" xml:space="preserve">
    <value>Please select file to upload.</value>
  </data>
  <data name="RejectReason" xml:space="preserve">
    <value>Reject Reason</value>
  </data>
  <data name="SearchTickets" xml:space="preserve">
    <value>Search Tickets</value>
  </data>
  <data name="SelectStatus" xml:space="preserve">
    <value>- Select Status -</value>
  </data>
  <data name="SelectUser" xml:space="preserve">
    <value>- Select User -</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="SendIcon" xml:space="preserve">
    <value>icon-circle-right2</value>
  </data>
  <data name="TicketChats" xml:space="preserve">
    <value>Ticket Chats</value>
  </data>
  <data name="TicketCode" xml:space="preserve">
    <value>Ticket Code</value>
  </data>
  <data name="TicketDescirption" xml:space="preserve">
    <value>Ticket Descirption</value>
  </data>
  <data name="TicketDescription" xml:space="preserve">
    <value>Ticket Description</value>
  </data>
  <data name="TicketDetails" xml:space="preserve">
    <value>Ticket Details</value>
  </data>
  <data name="TicketImage" xml:space="preserve">
    <value>Ticket Image</value>
  </data>
  <data name="TicketInfo" xml:space="preserve">
    <value>Ticket Info</value>
  </data>
  <data name="TicketName" xml:space="preserve">
    <value>Ticket Name</value>
  </data>
  <data name="TicketParticipantUser" xml:space="preserve">
    <value>Ticket Participant User</value>
  </data>
  <data name="TicketsList" xml:space="preserve">
    <value>Tickets List</value>
  </data>
  <data name="TicketStatus" xml:space="preserve">
    <value>Ticket Status</value>
  </data>
  <data name="UpdateTicket" xml:space="preserve">
    <value>Update Ticket</value>
  </data>
  <data name="UploadedTicketImage" xml:space="preserve">
    <value>Uploaded Ticket Image</value>
  </data>
  <data name="UploadFile" xml:space="preserve">
    <value>UploadFile</value>
  </data>
  <data name="ViewTicketInfo" xml:space="preserve">
    <value>View Ticket Info</value>
  </data>
  <data name="TicketOwnerUserFullName" xml:space="preserve">
    <value>Ticket Owner</value>
  </data>
  <data name="TicketCreatedPlatform" xml:space="preserve">
    <value>Created Platform</value>
  </data>
  <data name="TicketParticipantNos" xml:space="preserve">
    <value>Total Participants </value>
  </data>
  <data name="AllTicketParticipants" xml:space="preserve">
    <value>All Participants</value>
  </data>
  <data name="TicketParticipantName" xml:space="preserve">
    <value>Participant Name</value>
  </data>
  <data name="ChooseOneParticipant" xml:space="preserve">
    <value>Please choose one participant.</value>
  </data>
  <data name="DeleteParticipant" xml:space="preserve">
    <value>Delete Participant</value>
  </data>
  <data name="DeleteTicketOwnerUser" xml:space="preserve">
    <value>You cannot delete ticket owner.</value>
  </data>
  <data name="ReachedLimitParticipantUser" xml:space="preserve">
    <value>Reached maximum number of allowed users on this ticket.</value>
  </data>
  <data name="UserAlreadyExists" xml:space="preserve">
    <value>The user already exists.</value>
  </data>
  <data name="HasUploadedFile" xml:space="preserve">
    <value>has uploaded a file.</value>
  </data>
  <data name="LastConversation" xml:space="preserve">
    <value>Last Conversation</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="AddParticipants" xml:space="preserve">
    <value>Add Participants</value>
  </data>
  <data name="AssignCategory" xml:space="preserve">
    <value>AssignCategory</value>
  </data>
</root>