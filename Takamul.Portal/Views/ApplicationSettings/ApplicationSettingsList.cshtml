@using Takamul.Portal.Resources.Portal.ApplicationSettings;
@using Takamul.Portal.Resources.Controls.Buttons;
@using Takamul.Portal.Resources.Common;

@{
    Layout = "~/Views/Shared/_AppLayout.cshtml";
}

<div class="col-lg-12">
    <div class="row">
        <div class="col-md-12">
            <div class="clearfix"></div>
            <form id="frmDeclaration" class="form-horizontal" action="#" novalidate="novalidate" enctype="multipart/form-data">
                <div class="panel panel-white">
                    <div class="panel-heading">
                        <h6 class="panel-title">@ApplicationSettingsResx.ApplicationSettings</h6>
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="fakeWidth col-md-12"></div>
                            <div id="dvApplicationSettings">
                            </div>
                        </div>
                    </div>
                </div>
            </form>

        </div>
    </div>
</div>

@section SpecificPluginScripts
{

}


@section InlineScriptsRelated
{
    <script type="text/javascript">
        var sGridViewSelector = "grid-table";
        var sGridViewPagerSelector = "grid-pager";

        function fnBindAllApplicationSettingss() {
            $("#dvApplicationSettings").hide();
            $("#dvApplicationSettings").empty();

            var table = document.createElement('table');
            table.id = sGridViewSelector;
            var pager = document.createElement('div');
            pager.id = sGridViewPagerSelector;

            $('#dvApplicationSettings').append(table);
            $('#dvApplicationSettings').append(pager);


            var ConstantsNames =
                {
                    ID: 'ID',
                    ApplicationSettingsName: 'SETTINGS_NAME',
                    ApplicationSettingsValue: 'SETTINGS_VALUE'
                };
            var sCaption = '@ApplicationSettingsResx.ApplicationSettings';
            var oArrColumnNames = [
                '',//Hidden Columns Represent ID Int Value
                '@ApplicationSettingsResx.Name',
                '@ApplicationSettingsResx.Value',
                '' // Options
            ];

            var sBindDataUrl = '@Url.Action("JGetAllApplicationSettings", "ApplicationSettings")';

            var sAddUrl = "#";
            var sEditUrl = "#";
            var sDeleteUrl = "#";
            var oArrGridContextMenu = [
                                        { MenuTitle: "@Buttons.Options" },
                                        { Caption: "@Buttons.Edit", EventName: "fnLoadPartialEditApplicationSettings();", RowId: true }
            ];

            var oArrColsModel = [
                    {
                        name: ConstantsNames.ID, editable: false,
                        key: true, hidden: true
                    },
                    {
                        name: ConstantsNames.ApplicationSettingsName,
                        width: 150, editable: false,
                        align: EnumColumnsAlignment.Center
                    },
                     {
                         name: ConstantsNames.ApplicationSettingsValue,
                         width: 150, editable: false,
                         align: EnumColumnsAlignment.Center
                     }
            ];

            RenderGridView(sCaption, oArrColumnNames, sBindDataUrl, '', '', '', oArrColsModel, oArrGridContextMenu, false, false, false, table.id, pager.id);
            $("#" + table.id).bind('jqGridLoadComplete.jqGrid', function (e, data) {
                $("#" + table.id).jqGrid('hideCol', 'cb'); //hide checkbox

                $(window).bind('resize', function () {
                    $("#" + table.id).setGridWidth(Math.round($(".fakeWidth").width(), true));
                }).trigger('resize');


                $("#" + table.id).setGridWidth(Math.round($(".fakeWidth").width(), true)).trigger('resize');
                $("#" + pager.id).hide();
                $("#dvApplicationSettings").show();

                HideLoader();
            });
        }

        function fnApplicationSettingsValidateInitialization(sFormID) {
            var validator = $('#' + sFormID).validate({
                errorElement: 'div',
                errorClass: 'validation-error-label',
                focusInvalid: true,
                ignore: "",
                rules: {
                    SETTINGS_VALUE: {
                        required: true
                    }
                },
                messages: {
                    SETTINGS_VALUE: "@CommonResx.ThisFieldIsRequired"
                },
                highlight: function (e) {
                    $(e).closest('.error-placement').removeClass('has-Settings').addClass('has-error');
                },
                success: function (e) {
                    $(e).closest('.error-placement').removeClass('has-error');
                    $(e).remove();
                },
                errorPlacement: function (error, element) {
                    // Styled checkboxes, radios, bootstrap switch
                    if (element.parents('div').hasClass("checker") || element.parents('div').hasClass("choice") || element.parent().hasClass('bootstrap-switch-container')) {
                        if (element.parents('label').hasClass('checkbox-inline') || element.parents('label').hasClass('radio-inline')) {
                            error.appendTo(element.parent().parent().parent().parent());
                        }
                        else {
                            error.appendTo(element.parent().parent().parent().parent().parent());
                        }
                    }

                        // Unstyled checkboxes, radios
                    else if (element.parents('div').hasClass('checkbox') || element.parents('div').hasClass('radio')) {
                        error.appendTo(element.parent().parent().parent());
                    }

                        // Input with icons and Select2
                    else if (element.parents('div').hasClass('has-feedback') || element.hasClass('select2-hidden-accessible')) {
                        error.appendTo(element.parent());
                    }

                        // Inline checkboxes, radios
                    else if (element.parents('label').hasClass('checkbox-inline') || element.parents('label').hasClass('radio-inline')) {
                        error.appendTo(element.parent().parent());
                    }

                        // Input group, styled file input
                    else if (element.parent().hasClass('uploader') || element.parents().hasClass('input-group')) {
                        error.appendTo(element.parent().parent());
                    }

                    else {
                        error.insertAfter(element);
                    }
                },
                submitHandler: function (form) {
                },
                invalidHandler: function (form) {

                }
            });
        }

        function fnLoadPartialEditApplicationSettings() {

            var gdApplicationSettings = $('#' + sGridViewSelector);
            var vApplicationSettingsID = gdApplicationSettings.jqGrid('getGridParam', 'selrow');
            var rowData = gdApplicationSettings.getRowData(vApplicationSettingsID);

            var sApplicationSettingsName = rowData.SETTINGS_NAME;
            var sApplicationSettingsValue = rowData.SETTINGS_VALUE;

            var dataToSend = JSON.stringify({
                ID: vApplicationSettingsID,
                SETTINGS_NAME: sApplicationSettingsName,
                SETTINGS_VALUE: sApplicationSettingsValue
            });

            $("#dvPopUpWindow").dialog({
                title: '@ApplicationSettingsResx.EditApplicationSettings',
                autoOpen: true,
                width: '30%',
                resizable: false,
                modal: true,
                open: function () {
                    $("#dvPopUpWindowContainer").html("");
                    $.ajax({
                        url: '@Url.Action("PartialEditApplicationSettings", "ApplicationSettings")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: dataToSend,
                        async: true,
                        success: function (response) {
                            $("#dvPopUpWindowContainer").html(response);
                            fnApplicationSettingsValidateInitialization("frmEditApplicationSettings");

                        },
                        error: function (response) {
                            $("#dvPopUpWindowContainer").html("");
                        }
                    });
                },
                buttons: [
                     {
                         text: "@Buttons.Update",
                         "class": 'btn btn-sm bg-slate',
                         click: function () {
                             fnEditApplicationSettings();
                         }
                     },
                     {
                         text: '@Buttons.Cancel',
                         "class": 'btn btn-sm btn-default',
                         click: function () {
                             $(this).dialog("close");
                         }
                     }
                ]
            });
        }


        function fnEditApplicationSettings() {
            if (!$("#frmEditApplicationSettings").valid()) {
                return false;
            }
            var formData = $("#frmEditApplicationSettings").serialize();

            $.ajax({
                url: '@Url.Action("JEditApplicationSettings", "ApplicationSettings")',
                type: "POST",
                data: formData,
                dataType: "json",
                success: function (result) {
                    if (result.nResult == 1) {
                        ShowStatusBarNotification(result.sResultMessages, NotificationType.Success);
                        $("#dvPopUpWindow").dialog("close");
                        fnBindAllApplicationSettingss();
                    }
                    else {
                        ShowStatusBarNotification(result.sResultMessages, NotificationType.Error);
                    }


                },
                error: function () {

                }
            })
        }

        //Entry Point
        $(document).ready(function () {
            fnBindAllApplicationSettingss();
        });
    </script>
}