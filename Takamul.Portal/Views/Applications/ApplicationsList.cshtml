@using Takamul.Portal.Resources.Portal.Applications;
@using Takamul.Portal.Resources.Controls.Buttons;
@using Takamul.Portal.Resources.Common;
@{
    Layout = "~/Views/Shared/_GridCommon.cshtml";
}
<div class="col-lg-12">
    <div class="row">
        <div class="col-md-12">
            <div class="clearfix"></div>
            <div id="frmApplicationList" class="form-horizontal" action="#" novalidate="novalidate" enctype="multipart/form-data">
                <div class="panel panel-white">
                    <div class="panel-heading">
                        <h6 class="panel-title"> &nbsp;</h6>
                        <div class="heading-elements">
                            <div class="col-md-12">
                                <div class="content-group-sm">
                                    <div class="col-md-2 no-padding">
                                        <input type="text" class="form-control" id="txtSearchByApplicationID" name="txtSearchByApplicationID"
                                               placeholder="@ApplicationResx.AppID">
                                    </div>
                                    <div class="col-md-6 no-padding">
                                        <div class="input-group content-group">
                                            <div class="has-feedback">
                                                <input type="text" class="form-control" id="txtSearchByApplicationName" name="txtSearchByApplicationName"
                                                       placeholder="@ApplicationResx.AppName">
                                            </div>
                                            <div class="input-group-btn">
                                                <button type="submit" class="btn btn-primary btn-xs no-margin-top" onclick="fnBindAllApplications();">@Buttons.Search<i class="fa fa-search position-right"></i></button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mr-15 pull-right">
                                        <a title="Add new application" href="#" onclick="fnLoadPartialAddApplication();" class="btn btn-primary btn-xs"><i class="icon-add position-left"></i> @ApplicationResx.AddNewApplication</a>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="fakeWidth col-md-12"></div>
                            <div id="dvApplications">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>


@section InlineScriptsRelated
{
    <script type="text/javascript">

        var sGridViewSelector = "grid-table";
        var sGridViewPagerSelector = "grid-pager";
        function fnBindAllApplications() {
            ShowLoader();
            $("#dvApplications").hide();
            $("#dvApplications").empty();
            var table = document.createElement('table');
            table.id = sGridViewSelector;
            var pager = document.createElement('div');
            pager.id = sGridViewPagerSelector;

            $('#dvApplications').append(table);
            $('#dvApplications').append(pager);

            var ConstantsNames =
                {
                    ID: 'ID',
                    ApplicationName: 'APPLICATION_NAME',
                    ApplicationLogoPath: 'APPLICATION_LOGO_PATH',
                    DefaultThemeColor: 'DEFAULT_THEME_COLOR',
                    ApplicationExpiryDate: 'APPLICATION_EXPIRY_DATE',
                    IsActive: 'IS_ACTIVE',
                    CreatedDate: 'CREATED_DATE',
                    MemberName: 'MemberName',
                    MemberUserID: 'MemberUserID'
                };
            var sCaption = '@ApplicationResx.AllApplications';
            var oArrColumnNames = [
                '@ApplicationResx.ApplicationName',
                '@ApplicationResx.AppID',//Hidden Columns Represent ID Int Value
                '',//Hidden Columns Represent APPLICATION_LOGO_PATH String Value
                '',//Hidden Columns Represent MemberUserID String Value
                '',//Hidden Columns Represent APPLICATION_NAME String Value
                '',//Hidden Columns Represent IS_ACTIVE String Value
                '@ApplicationResx.Member',
                '@ApplicationResx.ApplicationExpiryDate',
                '@ApplicationResx.IsActive',
                '@ApplicationResx.CreatedDate',
                '@ApplicationResx.Options' // Options
            ];


            var vSearchByApplicationID = $("#txtSearchByApplicationID").val() == "" ? -99 : $("#txtSearchByApplicationID").val();
            var vSearchByApplicationName = $("#txtSearchByApplicationName").val();
            var params = {
                'nSearchByApplicationID': vSearchByApplicationID,
                'sSearchByApplicationName': vSearchByApplicationName

            };
            var sBindDataUrl = '@Url.Action("JBindAllApplications", "Applications")' + '?' + jQuery.param(params);

            var sAddUrl = "#";
            var sEditUrl = "#";
            var sDeleteUrl = "#";
            var oArrGridContextMenu = [
                                        { MenuTitle: "@ApplicationResx.Options" },
                                        { Caption: "@ApplicationResx.Details", EventName: "fnGoToApplicationDetais(-99);", RowId: true },
                                        { Caption: "@ApplicationResx.EditApplication", EventName: "fnPartialLoadEditApplication();", RowId: true },
            ];
            var oArrColsModel = [
                {
                    width: 150, editable: false,
                    align: EnumColumnsAlignment.Center,
                    formatter: function (cellvalue, options, rowObject) {
                        return "<div class='text-semibold'><a onclick='fnGoToApplicationDetais(" + rowObject.ID + ")' href='#'>" + rowObject.APPLICATION_NAME + "</a></div>";
                    }
                },
                    {
                        name: ConstantsNames.ID, editable: false,
                        key: true,
                        align: EnumColumnsAlignment.Center,

                    },
                    {
                        name: ConstantsNames.ApplicationLogoPath, editable: false,
                        key: false, hidden: true
                    },
                     {
                         name: ConstantsNames.MemberUserID, editable: false,
                         key: false, hidden: true
                     },
                     {
                         name: ConstantsNames.ApplicationName, editable: false,
                         key: false, hidden: true
                     },
                     {
                         name: ConstantsNames.IsActive,
                         editable: false,
                         align: EnumColumnsAlignment.Center,
                         hidden: true, key: false
                     },
                     {
                         name: ConstantsNames.MemberName,
                         width: 150, editable: false,
                         align: EnumColumnsAlignment.Center
                     },
                    {
                        name: ConstantsNames.ApplicationExpiryDate,
                        width: 150, editable: false,
                        align: EnumColumnsAlignment.Center,
                        formatter: 'date', formatoptions: { srcformat: 'U', newformat: 'd/m/Y' }
                    },
                    {
                        width: 150, editable: false,
                        align: EnumColumnsAlignment.Center,
                        formatter: function (cellvalue, options, rowObject) {
                            var bIsActive = rowObject.IS_ACTIVE;
                            var htmlString = '';
                            if (bIsActive) {
                                htmlString += "<i class='icon-checkmark-circle text-success position-left'></i>";
                            }
                            else {
                                htmlString += "<i class='icon-cancel-circle2 text-warning position-left'></i>";
                            }
                            return htmlString;
                        }
                    },
                    {
                        name: ConstantsNames.CreatedDate,
                        width: 150, editable: false,
                        align: EnumColumnsAlignment.Center,
                        formatter: 'date', formatoptions: { srcformat: 'U', newformat: 'd/m/Y' }
                    }
            ];

            RenderGridView(sCaption, oArrColumnNames, sBindDataUrl, '', '', '', oArrColsModel, oArrGridContextMenu, false, false, false, table.id, pager.id, true, false, true);
            $("#" + table.id).bind('jqGridLoadComplete.jqGrid', function (e, data) {
                $("#" + table.id).jqGrid('hideCol', 'cb'); //hide checkbox

                $(window).bind('resize', function () {
                    $("#" + table.id).setGridWidth(Math.round($(".fakeWidth").width(), true));
                }).trigger('resize');


                $("#" + table.id).setGridWidth(Math.round($(".fakeWidth").width(), true)).trigger('resize');

                $("#dvApplications").show();
                HideLoader();
            });
        }

        function fnClearSearch() {
            $("#txtSearchByApplicationID").val("");
            $("#txtSearchByApplicationName").val("");
        }

        function fnGoToApplicationDetais(nApplicationID) {
            debugger;
            var vApplicationID = -99;
            if (nApplicationID != null && nApplicationID != undefined && nApplicationID != -99) {
                vApplicationID = nApplicationID;
            }
            else {
                var gdApplicationist = $('#' + sGridViewSelector);
                vApplicationID = gdApplicationist.jqGrid('getGridParam', 'selrow');
            }

            $.ajax({
                url: '@Url.Action("JSetCurrentApplicationID", "Applications")',
                type: 'POST',
                data: { nApplicationID: vApplicationID },
                async: true,
                success: function (result, response) {
                    if (result.nResult == 1) {
                        url = '@Url.Action("AppDashboard", "ApplicationDashboard")';
                        window.location.href = url;

                    }
                    else {
                        ShowStatusBarNotification(result.sResultMessages, NotificationType.Error);
                    }
                },
                error: function (result, response) {
                    ShowStatusBarNotification(result.sResultMessages, NotificationType.Error);
                }
            });


        }

        function fnLoadPartialAddApplication() {
            var dialogWidth = 630;
            $("#dvPopUpWindow").dialog({
                title: '@ApplicationResx.AddApplication',
                autoOpen: true,
                width: '50%',
                resizable: false,
                modal: true,
                open: function (event, ui) {
                    $(this).parent().css('position', 'fixed');
                    $("#dvPopUpWindowContainer").html("");
                    $.ajax({
                        url: '@Url.Action("PartialAddApplication", "Applications")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: {},
                        async: true,
                        success: function (response) {
                            $("#dvPopUpWindowContainer").html(response);
                            fnAddApplicationValidateInitialization("frmAddApplication");

                            // Month and year menu
                            $(".datepicker-menus").datepicker({
                                changeMonth: true,
                                changeYear: true,
                                dateFormat: 'dd/mm/yy'
                            });

                            // Default file input style
                            $(".file-styled").uniform({
                                fileButtonClass: 'action btn btn-default'
                            });

                        },
                        error: function (response) {
                            $("#dvPopUpWindowContainer").html("");
                        }
                    });


                },
                buttons: [
                     {
                         text: "@Buttons.Save",
                         "class": 'btn btn-sm bg-slate',
                         click: function () {
                             fnSaveApplication();
                         }
                     },
                     {
                         text: '@Buttons.Cancel',
                         "class": 'btn btn-sm btn-default',
                         click: function () {
                             $(this).dialog("close");
                         }
                     }
                ]
            });
        }

        function fnSaveApplication() {

            if (!$("#frmAddApplication").valid()) {
                return false;
            }

            var data = new FormData();
            var files = $("#fuAddApplicationLogo").get(0).files;

            if (files.length <= 0) {
                ShowStatusBarNotification("@ApplicationResx.Pleaseselectfiletoupload", NotificationType.Warning);
                return false;
            }

            var sizeAllowed = '@System.Configuration.ConfigurationManager.AppSettings["DefaultFileSize"]'; // 1024 kb
            var nUploadedSize = fnCheckFileSize('fuAddApplicationLogo');
            if (Number(nUploadedSize) > Number(sizeAllowed)) {
                ShowStatusBarNotification("@ApplicationResx.AllowedFileSize", NotificationType.Warning);
                return false;
            }

            var extension = $("#fuAddApplicationLogo").val().split('.').pop().toUpperCase();
            var bIsInValidExt = fnIsValidFileExtension(extension);
            if (bIsInValidExt) {
                ShowStatusBarNotification("@ApplicationResx.InvalidFileFormat", NotificationType.Warning);
                return false;
            }

            var formData = $("#frmAddApplication").serializeArray();
            formData.push({ name: "MemberUserID", value: Number($("#ddlMemberUser").val()) });
            data.append("ApplicationLogoFile", files[0]);
            $.each(formData, function (key, input) {
                data.append(input.name, input.value);
            });
            debugger;
            $.ajax({
                url: '@Url.Action("JSaveApplication", "Applications")',
                type: "POST",
                processData: false,
                data: data,
                contentType: false,
                success: function (result, response) {
                    if (result != null || result != '') {
                        if (result.nResult == 1) {
                            ShowStatusBarNotification(result.sResultMessages, NotificationType.Success);
                            $("#dvPopUpWindow").dialog("close");
                            fnBindAllApplications();
                        }
                        else {
                            ShowStatusBarNotification(result.sResultMessages, NotificationType.Error);
                        }
                    }
                    else {
                        ShowStatusBarNotification("@CommonResx.AnErrorHasBeenOccured", NotificationType.Error);
                    }
                },
                error: function (er) { }

            });

        }

        function fnIsValidFileExtension(sExtension) {
            var bIsInValidExt = false;
            if (sExtension != "PNG" && sExtension != "JPG" && sExtension != "JPEG") {
                bIsInValidExt = true;
            }
            return bIsInValidExt;
        }

        function fnCheckFileSize(fileid) {
            var fileSize = 0;
            try {
                fileSize = $("#" + fileid)[0].files[0].size //size in bytes
                fileSize = fileSize / 1024; //size in kb
            }
            catch (e) {
                fileSize = 0;
                console.log(ex);
            }
            return fileSize;
        }

        function fnAddApplicationValidateInitialization(sFormID) {
            jQuery.validator.addMethod("dropDownValidator", function (value, element, param) {
                return this.optional(element) || value != param;
            }, "");

            debugger;
            var validator = $('#' + sFormID).validate({
                errorElement: 'div',
                errorClass: 'validation-error-label',
                focusInvalid: true,
                ignore: "",
                rules: {
                    APPLICATION_NAME: {
                        required: true
                    },
                    FORMATTED_EXPIRY_DATE: {
                        required: true
                    },
                    ddlMemberUser: {
                        dropDownValidator: "-99"
                    },
                },
                messages: {
                    APPLICATION_NAME: "@CommonResx.ThisFieldIsRequired",
                    FORMATTED_EXPIRY_DATE: "@CommonResx.ThisFieldIsRequired",
                    ddlMemberUser: "@CommonResx.ThisFieldIsRequired",
                },
                highlight: function (e) {
                    $(e).closest('.error-placement').removeClass('has-info').addClass('has-error');
                },
                success: function (e) {
                    $(e).closest('.error-placement').removeClass('has-error');
                    $(e).remove();
                },
                errorPlacement: function (error, element) {
                    // Styled checkboxes, radios, bootstrap switch
                    if (element.parents('div').hasClass("checker") || element.parents('div').hasClass("choice") || element.parent().hasClass('bootstrap-switch-container')) {
                        if (element.parents('label').hasClass('checkbox-inline') || element.parents('label').hasClass('radio-inline')) {
                            error.appendTo(element.parent().parent().parent().parent());
                        }
                        else {
                            error.appendTo(element.parent().parent().parent().parent().parent());
                        }
                    }

                        // Unstyled checkboxes, radios
                    else if (element.parents('div').hasClass('checkbox') || element.parents('div').hasClass('radio')) {
                        error.appendTo(element.parent().parent().parent());
                    }

                        // Input with icons and Select2
                    else if (element.parents('div').hasClass('has-feedback') || element.hasClass('select2-hidden-accessible')) {
                        error.appendTo(element.parent());
                    }

                        // Inline checkboxes, radios
                    else if (element.parents('label').hasClass('checkbox-inline') || element.parents('label').hasClass('radio-inline')) {
                        error.appendTo(element.parent().parent());
                    }

                        // Input group, styled file input
                    else if (element.parent().hasClass('uploader') || element.parents().hasClass('input-group')) {
                        error.appendTo(element.parent().parent());
                    }

                    else {
                        error.insertAfter(element);
                    }
                },
                submitHandler: function (form) {
                },
                invalidHandler: function (form) {

                }
            });
        }

        function fnPartialLoadEditApplication() {
            var gdApplication = $('#' + sGridViewSelector);
            var vAppplicationId = gdApplication.jqGrid('getGridParam', 'selrow');
            var rowData = gdApplication.getRowData(vAppplicationId);
            var sApplicationName = rowData.APPLICATION_NAME;
            var sExpiryDate = rowData.APPLICATION_EXPIRY_DATE;
            var bIsActive = rowData.IS_ACTIVE;
            var sApplicationLogoPath = rowData.APPLICATION_LOGO_PATH;
            var sMemberUserID = rowData.MemberUserID;
            debugger;
            var dataToSend = JSON.stringify({
                ID: vAppplicationId,
                APPLICATION_NAME: sApplicationName,
                APPLICATION_EXPIRY_DATE: moment(sExpiryDate, "DD/MM/YYYY").format("YYYY-MM-DD hh:mm:ss A"),
                IS_ACTIVE: bIsActive,
                APPLICATION_LOGO_PATH: sApplicationLogoPath,
                MemberUserID: sMemberUserID,
            });
            debugger;
            $("#dvPopUpWindow").dialog({
                title: '@ApplicationResx.EditApplication',
                autoOpen: true,
                //position: { my: "center", at: "top-50", of: $(".fakeWidth") },
                width: '50%',
                resizable: false,
                modal: true,
                open: function (event, ui) {
                    $(this).parent().css('position', 'fixed');
                    $("#dvPopUpWindowContainer").html("");
                    $.ajax({
                        url: '@Url.Action("PartialEditApplication", "Applications")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: dataToSend,
                        async: true,
                        success: function (response) {
                            $("#dvPopUpWindowContainer").html(response);
                            fnAddApplicationValidateInitialization("frmEditApplication");

                            // Month and year menu
                            $(".datepicker-menus").datepicker({
                                changeMonth: true,
                                changeYear: true,
                                dateFormat: 'dd/mm/yy'
                            });

                            // Default file input style
                            $(".file-styled").uniform({
                                fileButtonClass: 'action btn btn-default'
                            });
                        },
                        error: function (response) {
                            $("#dvPopUpWindowContainer").html("");
                        }
                    });
                },
                buttons: [
                     {
                         text: "@Buttons.Update",
                         "class": 'btn btn-sm bg-slate',
                         click: function () {
                             fnEditApplication();
                         }
                     },
                     {
                         text: '@Buttons.Cancel',
                         "class": 'btn btn-sm btn-default',
                         click: function () {
                             $("#dvPopUpWindow").dialog("close");
                         }
                     }
                ]
            });
        }

        function fnEditApplication() {
            if (!$("#frmEditApplication").valid()) {
                return false;
            }

            var data = new FormData();
            var files = $("#fuAddApplicationLogo").get(0).files;

            if (files.length > 0) {

                var sizeAllowed = '@System.Configuration.ConfigurationManager.AppSettings["DefaultFileSize"]'; // 1024 kb
                var nUploadedSize = fnCheckFileSize('fuAddApplicationLogo');
                if (Number(nUploadedSize) > Number(sizeAllowed)) {
                    ShowStatusBarNotification("@ApplicationResx.AllowedFileSize", NotificationType.Warning);
                    return false;
                }

                var extension = $("#fuAddApplicationLogo").val().split('.').pop().toUpperCase();
                var bIsInValidExt = fnIsValidFileExtension(extension);
                if (bIsInValidExt) {
                    ShowStatusBarNotification("@ApplicationResx.InvalidFileFormat", NotificationType.Warning);
                    return false;
                }
            }

            var formData = $("#frmEditApplication").serializeArray();
            debugger;
            formData.push({ name: "MemberUserID", value: Number($("#ddlMemberUser").val()) });
            data.append("ApplicationLogoFile", files[0]);
            $.each(formData, function (key, input) {
                data.append(input.name, input.value);
            });
            debugger;
            $.ajax({
                url: '@Url.Action("JEditApplication", "Applications")',
                type: "POST",
                processData: false,
                data: data,
                contentType: false,
                success: function (result, response) {
                    if (result != null || result != '') {
                        if (result.nResult == 1) {
                            ShowStatusBarNotification(result.sResultMessages, NotificationType.Success);
                            $("#dvPopUpWindow").dialog("close");
                            fnBindAllApplications();
                        }
                        else {
                            ShowStatusBarNotification(result.sResultMessages, NotificationType.Error);
                        }
                    }
                    else {
                        ShowStatusBarNotification("@CommonResx.AnErrorHasBeenOccured", NotificationType.Error);
                    }
                },
                error: function (er) { }

            });


        }

        //Knockout ViewModel
        $(document).ready(function () {
            ViewModel = function () {
                var self = this;
                self.vmsApplicationLogoName = ko.observable('');
                self.vmsApplicationLogoPath = ko.observable('');
                return {
                    vmsApplicationLogoName: vmsApplicationLogoName,
                    vmsApplicationLogoPath: vmsApplicationLogoPath
                };
            }();
        });
        //EndKnockout ViewModel

        //Entry Point
        $(document).ready(function () {
            ko.applyBindings(ViewModel);
            fnBindAllApplications();
        });
    </script>
}