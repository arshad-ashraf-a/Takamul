@using Takamul.Portal.Resources.Portal.Events;
@using Takamul.Portal.Resources.Controls.Buttons;
@using Takamul.Portal.Resources.Common;
@using Infrastructure.Utilities
@using Infrastructure.Core
@{
    Layout = "~/Views/Shared/_AppLayout.cshtml";
}
@model Takamul.Models.EventViewModel
<link href="~/assets/js/plugins/googlemap/MapStyleSheet.css" rel="stylesheet" />
@using (Html.BeginForm("", "", FormMethod.Post, new { id = "frmEditEvent", @class = "form-horizontal" }))
{
    <div class="col-md-12">

        <div class="panel panel-white">
            <div class="panel-heading">
                <h6 class="panel-title"> @EventResx.EditNewEvent</h6>
            </div>
            <div class="panel-body">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.ID)
                @* Event Name*@
                <div class="form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-lg-4 control-label">@EventResx.EventName&nbsp;<span class="text-danger">*</span></label>
                            <div class="col-lg-5">
                                @Html.EditorFor(model => model.EVENT_NAME, new { htmlAttributes = new { @class = "form-control", placeholder = @EventResx.EventName } })
                            </div>
                        </div>

                    </div>
                </div>

                @* Event Description*@
                <div class="form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-lg-4 control-label">@EventResx.EventDescription&nbsp;<span class="text-danger">*</span></label>
                            <div class="col-lg-5">
                                <textarea class="form-control" rows="4" placeholder="@EventResx.EventDescription" cols="5" id="EVENT_DESCRIPTION" name="EVENT_DESCRIPTION">@Model.EVENT_DESCRIPTION.Replace("</br>", Environment.NewLine)</textarea>
                            </div>
                        </div>

                    </div>
                </div>

                @* Event Date*@
                <div class="form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-lg-4 control-label">@EventResx.EventDate&nbsp;<span class="text-danger">*</span></label>
                            <div class="col-lg-8">
                                <div class="col-sm-4 no-padding">
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="icon-calendar22"></i></span>
                                        @Html.EditorFor(model => model.FORMATTED_EVENT_DATE, new { htmlAttributes = new { @class = "form-control datepicker-menus", @Value = Model.EVENT_DATE.ToString("dd/MM/yyyy"), placeholder = @EventResx.EventDate } })
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <input type="text" id="txtEventTime" data-format="HH:mm" data-template="HH : mm" name="datetime">
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

                @* Event Category *@
                <div class="form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-lg-4 control-label">@EventResx.EventCategory</label>
                            <div class="col-lg-8">
                                <div class="col-md-4 no-padding">
                                    <select class="form-control" id="ddlEventCategory" name="ddlEventCategory">
                                        <option></option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


                @* Event Map*@
                <div class="form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-lg-4 control-label">@EventResx.EventMap</label>
                            <div class="col-lg-5">
                                <div class="alert alert-info alert-styled-left alert-bordered">
                                    <span class="text-semibold">@EventResx.MapInfo</span>
                                </div>
                                <input id="txtsearch" class="apply" type="text" placeholder="Enter Search Place e.g Muscat Grand Mall">
                                <div id="divloadMap" style="height:600px;width:100%"></div>
                            </div>
                        </div>

                    </div>
                </div>

                @* Event Location*@
                <div class="form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-lg-4 control-label">@EventResx.EventLocation&nbsp;<span class="text-danger">*</span></label>
                            <div class="col-lg-5">
                                @Html.EditorFor(model => model.EVENT_LOCATION_NAME, new { htmlAttributes = new { @class = "form-control", placeholder = @EventResx.EnterSearchLocation } })
                            </div>
                        </div>

                    </div>
                </div>

                @* Event Latitude*@
                <div class="form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-lg-4 control-label">@EventResx.Latitude&nbsp;<span class="text-danger">*</span></label>
                            <div class="col-lg-5">
                                @Html.EditorFor(model => model.EVENT_LATITUDE, new { htmlAttributes = new { @class = "form-control", placeholder = @EventResx.Latitude, @readonly = "readonly" } })
                            </div>
                        </div>

                    </div>
                </div>

                @* Event Longitude*@
                <div class="form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-lg-4 control-label">@EventResx.Longitude&nbsp;<span class="text-danger">*</span></label>
                            <div class="col-lg-5">
                                @Html.EditorFor(model => model.EVENT_LONGITUDE, new { htmlAttributes = new { @class = "form-control", placeholder = @EventResx.Longitude, @readonly = "readonly" } })
                            </div>
                        </div>

                    </div>
                </div>

                @* Is Active*@
                <div class="form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-lg-4 control-label">@EventResx.IsActive</label>
                            <div class="col-lg-5">
                                @Html.CheckBox("IS_ACTIVE", Model.IS_ACTIVE, new { @class = "styled" })
                            </div>
                        </div>

                    </div>
                </div>

                @* Is Notify *@
                <div class="form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-lg-4 control-label">@EventResx.IsNotifyUser</label>
                            <div class="col-lg-5">
                                @Html.CheckBox("IS_NOTIFY_USER", Model.IS_NOTIFY_USER, new { @class = "styled" })
                            </div>
                        </div>
                    </div>
                </div>

                @* Event Image View *@
                @if (!string.IsNullOrEmpty(Model.EVENT_IMG_FILE_PATH))
                {
                    <div class="form-group no-margin-bottom">
                        <div class="col-md-12">
                            <label class="col-lg-4 control-label">@EventResx.UploadedEventImage</label>
                            <div class="col-md-8">
                                <div class="panel panel-flat">
                                    <div class="panel-body p-5">
                                        <ul class="media-list">
                                            <li class="media">
                                                @*<div class="media-left media-middle">
                                                    <i class="icon-file-picture icon-2x text-muted"></i>
                                                </div>*@
                                                <div class="media-body valign-middle">
                                                    <img height="100" width="100" src="@Url.Content(string.Format("{0}{1}",CommonHelper.sGetConfigKeyValue(ConstantNames.RemoteFileServerPath), @Model.EVENT_IMG_FILE_PATH))" alt="Image could not display" />

                                                    @*<a href="#" onclick="fnDownloadFile(); return false;" class="media-heading text-semibold"> @System.IO.Path.GetFileName(Model.EVENT_IMG_FILE_PATH)</a>*@
                                                </div>
                                                <div class="media-right media-middle">
                                                    <ul class="icons-list icons-list-extended text-nowrap">
                                                        <li><a href="#" onclick="fnDownloadFile(); return false;"><i class="icon-download"></i></a></li>
                                                    </ul>
                                                </div>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                }
                @* Event Image *@
                <div class="form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-lg-4 control-label">@EventResx.EventImage</label>
                            <div class="col-lg-8">
                                <input type="file" id="fuEventImage" class="file-styled">
                            </div>
                        </div>
                    </div>
                </div>

                <div class="clearfix"></div>
                <div class="col-md-12 text-center">
                    <button type="submit" class="btn btn-primary btn-lg" onclick="fnEditEvent()">@Buttons.Update</button>
                    <button type="submit" class="btn bg-slate-300 btn-lg" onclick="fnClearControls(); return false;">@Buttons.Clear</button>
                    <a href="@Url.Action("EventsList", "Events")" class="btn bg-brown-300 btn-lg" return false;"><i class="fa fa-mail-reply-all position-left"></i>@Buttons.Back</a>
                </div>
            </div>
        </div>
       
    </div>
}
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyB12deZM0ibuAHFBFQk-1vEbLuzbqao64M&libraries=places"></script>
<script src="~/assets/js/plugins/googlemap/GoogleAPIScript.js"></script>
@section SpecificPluginScripts
{
    <script type="text/javascript" src="~/assets/js/plugins/forms/combodate.js"></script>
}
@section InlineScriptsRelated
{
    <script type="text/javascript">

        function fnFillApplicationCategory() {
            var oParameters = {};
            oParameters['bLanguageEnable'] = true;

            FillDropDownRoot('@Url.Action("JGetApplicationCategories", "ApplicationCategory")', 'POST', false, 'ddlEventCategory', 'ID', 'CATEGORY_NAME', 'Select Category', ' ', oParameters,
              function () {
                  //Success Function
                  $("#ddlEventCategory").select2({ width: '100%' });
                  $("#ddlEventCategory").select2('val', String(@Model.EVENT_CATEGORY_ID));
              },
              function () {
                  //Error
              })
        }

        $(".styled").uniform({
            radioClass: 'choice'
        });

        function fnEventValidateInitialization() {
            var validator = $('#frmEditEvent').validate({
                errorElement: 'div',
                errorClass: 'validation-error-label',
                focusInvalid: true,
                ignore: "",
                rules: {
                    EVENT_NAME: {
                        required: true
                    },
                    EVENT_DESCRIPTION: {
                        required: true
                    },
                    EVENT_DATE: {
                        required: true
                    },
                    EVENT_LOCATION_NAME: {
                        required: true
                    },
                    EVENT_LATITUDE: {
                        required: true
                    },
                    EVENT_LONGITUDE: {
                        required: true
                    }
                },
                messages: {
                    EVENT_NAME: "@CommonResx.ThisFieldIsRequired",
                    EVENT_DESCRIPTION: "@CommonResx.ThisFieldIsRequired",
                    EVENT_DATE: "@CommonResx.ThisFieldIsRequired",
                    EVENT_LOCATION_NAME: "@CommonResx.ThisFieldIsRequired",
                    EVENT_LATITUDE: "@CommonResx.ThisFieldIsRequired",
                    EVENT_LONGITUDE:  "@CommonResx.ThisFieldIsRequired",
                },
                highlight: function (e) {
                    $(e).closest('.error-placement').removeClass('has-info').addClass('has-error');
                },
                success: function (e) {
                    $(e).closest('.error-placement').removeClass('has-error');
                    $(e).remove();
                },
                errorPlacement: function (error, element) {
                    // Styled checkboxes, radios, bootstrap switch
                    if (element.parents('div').hasClass("checker") || element.parents('div').hasClass("choice") || element.parent().hasClass('bootstrap-switch-container')) {
                        if (element.parents('label').hasClass('checkbox-inline') || element.parents('label').hasClass('radio-inline')) {
                            error.appendTo(element.parent().parent().parent().parent());
                        }
                        else {
                            error.appendTo(element.parent().parent().parent().parent().parent());
                        }
                    }

                        // Unstyled checkboxes, radios
                    else if (element.parents('div').hasClass('checkbox') || element.parents('div').hasClass('radio')) {
                        error.appendTo(element.parent().parent().parent());
                    }

                        // Input with icons and Select2
                    else if (element.parents('div').hasClass('has-feedback') || element.hasClass('select2-hidden-accessible')) {
                        error.appendTo(element.parent());
                    }

                        // Inline checkboxes, radios
                    else if (element.parents('label').hasClass('checkbox-inline') || element.parents('label').hasClass('radio-inline')) {
                        error.appendTo(element.parent().parent());
                    }

                        // Input group, styled file input
                    else if (element.parent().hasClass('uploader') || element.parents().hasClass('input-group')) {
                        error.appendTo(element.parent().parent());
                    }

                    else {
                        error.insertAfter(element);
                    }
                },
                submitHandler: function (form) {
                },
                invalidHandler: function (form) {

                }
            });
        }


        function fnEditEvent() {
            if (!$("#frmEditEvent").valid()) {
                return false;
            }

            var data = new FormData();
            var files = $("#fuEventImage").get(0).files;

            if (files.length > 0) {

                var sizeAllowed = '@System.Configuration.ConfigurationManager.AppSettings["DefaultFileSize"]'; // 1024 kb
                var nUploadedSize = fnCheckFileSize('fuEventImage');
                if (Number(nUploadedSize) > Number(sizeAllowed)) {
                    ShowStatusBarNotification("@EventResx.AllowedFileSize", NotificationType.Warning);
                    return false;
                }

                var extension = $("#fuEventImage").val().split('.').pop().toUpperCase();
                var bIsInValidExt = fnIsValidFileExtension(extension);
                if (bIsInValidExt) {
                    ShowStatusBarNotification("@EventResx.InvalidFileFormat", NotificationType.Warning);
                    return false;
                }
            }

            var formData = $("#frmEditEvent").serializeArray();
            data.append("EventImage", files[0]);
            $.each(formData, function (key, input) {
                data.append(input.name, input.value);
            });
           
            data.append("EVENT_TIME", $("#txtEventTime").combodate('getValue', 'HH:mm'));

            var nCategoryID = $('#ddlEventCategory').val();
            if (nCategoryID != -99) {
                data.append("EVENT_CATEGORY_ID", nCategoryID);
            }

            $.ajax({
                url: '@Url.Action("JEditEvent", "Events")',
                type: "POST",
                processData: false,
                data: data,
                contentType: false,
                success: function (result, response) {
                    if (result != null || result != '') {
                        if (result.nResult == 1) {
                            ShowStatusBarNotification(result.sResultMessages, NotificationType.Success);
                            window.location.reload();
                        }
                        else {
                            ShowStatusBarNotification(result.sResultMessages, NotificationType.Error);
                        }
                    }
                    else {
                        ShowStatusBarNotification("@CommonResx.AnErrorHasBeenOccured", NotificationType.Error);
                    }
                },
                error: function (er) { }

            });
        }

        function fnIsValidFileExtension(sExtension) {
            var bIsInValidExt = false;
            if (sExtension != "PNG" && sExtension != "JPG" && sExtension != "JPEG") {
                bIsInValidExt = true;
            }
            return bIsInValidExt;
        }

        function fnCheckFileSize(fileid) {
            var fileSize = 0;
            try {
                fileSize = $("#" + fileid)[0].files[0].size //size in bytes
                fileSize = fileSize / 1024; //size in kb
            }
            catch (e) {
                fileSize = 0;
                console.log(ex);
            }
            return fileSize;
        }

        function fnClearControls() {
            $("#EVENT_NAME").val("");
            $("#EVENT_DESCRIPTION").val("");
            $("#EVENT_DATE").val("");
            $("#EVENT_LOCATION_NAME").val("");
            $("#EVENT_LATITUDE").val("");
            $("#EVENT_LONGITUDE").val("");
        }

        //Entry Point
        $(document).ready(function () {
            fnEventValidateInitialization();
        });

        $(function () {
            $("#EVENT_LOCATION_NAME").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "@Url.Action("JGetEventVenuesList", "Events")",
                        data: { SearchText: request.term },
                        dataType: "json",
                        type: "GET",
                        success: function (data) {
                            $('#EVENT_LATITUDE').val("");
                            $('#EVENT_LONGITUDE').val("");

                            if (data.length == 0) {
                                return false;
                            }
                            else {
                                response($.map(data, function (item) {
                                    return {
                                        label: item.description,
                                        value: item.description,
                                        placeid: item.place_id
                                    }
                                }));
                            }
                        },
                        error: function (x, y, z) {
                            alert('error');
                        }
                    });
                },
                select: function (event, ui) {
                    $('#EVENT_LOCATION_NAME').val(ui.item.label);
                    GetVenueDetailsByPlaceId(ui.item.placeid);
                    return false;
                }
            }).autocomplete("widget").addClass("CitiesAutocomplete");
        });

        function GetVenueDetailsByPlaceId(PlaceId) {
            $.ajax({
                url: '@Url.Action("GetVenueDetailsByPlace", "Events")',
                dataType: "json",
                data: {
                    placeId: PlaceId
                },
                type: "GET",
                async: false,
                error: function (xhr, status, error) {

                },
                success: function (data) {
                    $('#EVENT_LATITUDE').val(data.Latitude);
                    $('#EVENT_LONGITUDE').val(data.Longitude);
                },
                beforeSend: function () {
                    ShowLoader();
                }
            });
        }

        function fnDownloadFile() {
            var sFileFullPath = '@Model.EVENT_IMG_FILE_PATH';
            window.location = '@Url.Action("DownloadFile", "Common")?sFileFullPath=' + sFileFullPath;
            return false;
        }

        //Entry Point
        $(document).ready(function () {
            fnFillApplicationCategory();
            fnEventValidateInitialization();

            google.maps.event.addDomListener(window, 'load', LoadGoogleMAP('@Model.EVENT_LATITUDE', '@Model.EVENT_LONGITUDE'));

            // Initialize
            $('#txtEventTime').combodate({
                firstItem: 'name', //show 'hour' and 'minute' string at first item of dropdown
                minuteStep: 1,
                value: new Date(Date.parse('@Model.EVENT_DATE'))
            });
        });

    </script>
}